services:
  anvil:
    image: ghcr.io/foundry-rs/foundry:v1.2.3
    container_name: anvil
    entrypoint:
      - anvil
      - --host
      - 0.0.0.0
      - --chain-id
      - "31337"
      - --port
      - "8545"
    ports:
      - "8545:8545"
    networks:
      - pongnet
    environment:
      - FOUNDRY_DISABLE_NIGHTLY_WARNING=1

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: transcendence
    depends_on:
      - anvil
    env_file:
      - ./src/back/.env.backend
      - .env
    volumes:
      - ./contracts/out:/contracts/out
      - ft-logs:/app/logs
    networks:
      - pongnet

  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
      args:
        NGINX_USER_NAME: ${NGINX_USER_NAME}
        NGINX_USER_PASSWORD: ${NGINX_USER_PASSWORD}
    container_name: nginx
    env_file:
      - .env
    environment:
      - NGINX_USER_NAME
      - NGINX_USER_PASSWORD
    depends_on:
      - backend
      - prometheus
      - grafana
      - elasticsearch
      - kibana
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - elknet
      - pongnet

  prometheus:
    build:
      context: ./docker/prometheus
      dockerfile: Dockerfile
      args:
        ARCH: x86_64
    container_name: prometheus
    restart: on-failure
    networks:
      - pongnet
    expose:
      - "9090"
    depends_on:
      - nginx-prometheus-exporter
  pushgateway:
    image: prom/pushgateway:latest
    container_name: pushgateway
    ports:
      - "9091:9091"
    networks:
      - pongnet

  grafana:
    build:
      context: ./docker/grafana
      dockerfile: Dockerfile
    container_name: grafana
    env_file:
      - .env
    restart: on-failure
    environment:
      - GF_SERVER_ROOT_URL
      - GF_SECURITY_ADMIN_USER
      - GF_SECURITY_ADMIN_PASSWORD
      - GF_INSTALL_PLUGINS=grafana-lokiexplore-app
      - GF_AUTH_BASIC_ENABLED=true
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - pongnet
    depends_on:
      - prometheus

  nginx-prometheus-exporter:
    build:
      context: ./docker/nginx-prometheus-exporter
      dockerfile: Dockerfile
      args:
        ARCH: x86_64
    container_name: nginx-prometheus-exporter
    ports:
      - "9113:9113"
    networks:
      - pongnet

  deployer:
    image: ghcr.io/foundry-rs/foundry:v1.2.3
    user: root
    env_file:
      - .env
    environment:
      - PRIVATE_KEY
      - RPC_URL
    working_dir: /contracts
    entrypoint:
      - forge
      - create
      - "--rpc-url=${RPC_URL}"
      - "--private-key=${PRIVATE_KEY}"
      - "--broadcast"
      - src/ScoreBoard.sol:ScoreBoard
    volumes:
      - ./contracts:/contracts
    depends_on:
      - anvil
    networks:
      - pongnet
    restart: "no"
  elasticsearch:
    build:
      context: ./docker/elasticsearch
      dockerfile: Dockerfile
    container_name: es
    ports:
      - "9200"
      - "9300"
    env_file:
      - .env
    environment:
      - ES_JAVA_OPTS=-Xms2g -Xmx2g # Memory settings
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - es-data:/usr/share/elasticsearch/data
      - es-ca:/usr/share/elasticsearch/config/shared/ca
      - es-certs-logstash:/usr/share/elasticsearch/config/shared/certs/logstash
      - es-certs-kibana:/usr/share/elasticsearch/config/shared/certs/kibana
      - es-certs-filebeat:/usr/share/elasticsearch/config/shared/certs/filebeat
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -k -u elastic:${ELASTIC_PASSWORD} https://elasticsearch:9200/_cluster/health?wait_for_status=green&timeout=1s >/dev/null 2>&1",
        ]
      interval: 5s
      timeout: 10s
      retries: 80
    restart: on-failure
    networks:
      elknet:
        aliases:
          - elasticsearch # Alias for internal communication
  logstash:
    build:
      context: ./docker/logstash
      dockerfile: Dockerfile
    container_name: logstash
    environment:
      - LOGSTASH_API_KEY #API key for Logstash
      - LOGSTASH_MONITORING_API_KEY # API key for monitoring
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - LS_JAVA_OPTS=-Xmx1g -Xms1g
      - LOGGING_ROOT_LEVEL=debug
    env_file:
      - .env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - es-ca:/usr/share/logstash/ca:ro
      - es-certs-logstash:/usr/share/logstash/certs:ro
    restart: on-failure
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'bash -c ''echo > /dev/tcp/localhost/5044 && echo "open" || echo "closed"''',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - elknet

  filebeat:
    user: filebeat # filebeat starts as filebeat user(basically non-root in filebeat imagex)
    group_add: # filebeat user needs to be in the root group to access logs
      - 0
    build:
      context: ./docker/filebeat
      dockerfile: Dockerfile
    container_name: filebeat
    volumes:
      - ft-logs:/var/log/ft_transcendence:ro
      - /etc/localtime:/etc/localtime:ro
      - es-ca:/usr/share/filebeat/ca:ro
      - es-certs-filebeat:/usr/share/filebeat/certs:ro
    depends_on:
      logstash:
        condition: service_healthy
    networks:
      - elknet

  kibana:
    build:
      context: ./docker/kibana
      dockerfile: Dockerfile
    container_name: kibana
    healthcheck:
      test: curl -s https://localhost:5601/login >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 20
    ports:
      - "5601"
    command: >
      sh -c '
        if [ -f /usr/share/kibana/tokens/service.token ]; then
          export ELASTICSEARCH_SERVICE_ACCOUNT_TOKEN=$(cat /usr/share/kibana/tokens/service.token)
          echo "üîë Loaded service token from file"
        else
          echo "‚ö†Ô∏è  service.token not found, falling back to ENV"
        fi
        exec /usr/local/bin/kibana-docker
      '
    environment:
      # - ELASTICSEARCH_USERNAME=kibana_system
      # - ELASTICSEARCH_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
      - ELASTICSEARCH_SERVICE_ACCOUNT_TOKEN=${KIBANA_SERVICE_TOKEN:-}
      - KIBANA_ENCRYPTION_KEY
      - ELASTIC_PASSWORD
      - LOGGING_ROOT_LEVEL=debug
    env_file:
      - .env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - es-ca:/usr/share/kibana/ca:ro
      - es-certs-kibana:/usr/share/kibana/certs:ro
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      elknet:
      pongnet:
        aliases:
          - kibana

networks:
  pongnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
  elknet:
    driver: bridge

volumes:
  grafana-data:
  es-data:
  es-ca:
  es-certs-logstash:
  es-certs-kibana:
  es-certs-filebeat:
  ft-logs:
