upstream blockchain {
    server anvil:8545;
}

# 1) Redirect plain HTTP → HTTPS
server {
    listen      80;
    listen      [::]:80 default_server;
    server_name localhost; # domain input

    location /nginx_status {
        stub_status on;
        allow 172.20.0.0/16;
        allow 127.0.0.1;
        deny all;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

# 2) HTTPS server block (TLS termination)
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name localhost; # domain input

    # ─── TLS settings ──────────────────────────────────────────────
    ssl_certificate     /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # ───  Blockchain JSON‑RPC Proxy ──────────────────────────────
    location ^~ /rpc/ {
        proxy_pass         http://blockchain/;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Upgrade           $http_upgrade;
        proxy_set_header   Connection        "upgrade";
    }

    location ^~ /rpc-ws/ {
        proxy_pass         http://blockchain/;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade           $http_upgrade;
        proxy_set_header   Connection        "upgrade";
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }

    location = /rpc {
	return 307 /rpc/;
    }

    # ─── Proxy API calls to the backend (HTTP) ────────────────────
    location /api/ {
        proxy_pass         http://backend:3000;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }

    location /ws {
        proxy_pass         http://backend:3000;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   Upgrade           $http_upgrade;
        proxy_set_header   Connection        "upgrade";
    }

    # ─── Serve static front-end files ─────────────────────────────
    location / {
        root   /usr/share/nginx/html;
        index  index.html;
        try_files $uri $uri/ /index.html;
    }
    
    location /prometheus/ {
        auth_basic "Restricted Access";
        proxy_pass http://prometheus:9090/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
    }

    # (Optional) Grafana UI
    #location /grafana/ {
    #    auth_basic           "Restricted Access";
    #    auth_basic_user_file /etc/nginx/.htpasswd;
    #    proxy_pass           http://grafana:3000/;
    #    proxy_set_header     Host              $host;
    #    proxy_set_header     X-Real-IP         $remote_addr;
    #    proxy_set_header     X-Forwarded-For   $proxy_add_x_forwarded_for;
    #    proxy_set_header     X-Forwarded-Proto $scheme;
    #    proxy_set_header     Upgrade           $http_upgrade;
    #    proxy_set_header     Connection        "upgrade";
    #    proxy_buffering off;
    #}
    access_log /var/log/nginx/prometheus_access.log;
    error_log /var/log/nginx/prometheus_error.log warn;
}
